# syntax=docker/dockerfile:1

# -*- mode: shell-script -*-
#
# This Dockerfile defines the base Docker image for CGE cloud builds tools,
# exposed as "kambi/castle-engine-cloud-builds-tools:cge-none".
# This image contains prerequisites (like FPC and Android SDK) but not CGE.
# Used by build.sh.

# Base image ------------------------------------------------------------------

# We base on Debian bookworm.
# It includes Java 17 (just default-jdk gives it), required by Android Gradle Plugin 8.0.1.
# See https://hub.docker.com/_/debian about "slim" meaning.
FROM debian:bookworm-slim

# Install and configure Debian tools -----------------------------------------

# Reasons of packages:
# - wget is for downloading in /usr/local/fpclazarus/bin/add_new_fpc_version.sh
# - libglx-dev, libgl-dev link with OpenGL
# - libgtk2.0-dev link with GTK 2 (for CGE editor with default LCL backend on Linux)
# - xorg-dev to link with additional X libs, used by CASTLE_WINDOW_XLIB (used by https://github.com/castle-engine/cge-www/blob/master/Jenkinsfile.convert-to-x3d )
# - default-jdk is for Android SDK
# - unzip is needed by Android sdkmanager
# - binutils-mingw-w64 and gcc
#   for CGE build tool cross-compiling to Windows (32 and 64), it needs resource compiler
# - zip for CGE build tool (to package to zip)
# - libnvtt-bin for CGE build tool (to generate compressed textures)
# - make to compile FPC, and for various jobs
# - file is used by Android compilation (although it seems it works without it too, but there's some error about "file" binary missing)
# - curl for TestFairy uploader
# - git for "make tests" in pasdoc
# - php-cli for "make tests" in pasdoc and in cge-www
# - asciidoctor, coderay for "make tests" in cge-www
# - imagemagick for update_image_sizes.sh in cge-www
RUN apt-get --allow-releaseinfo-change update && \
  apt-get --no-install-recommends -y install \
    asciidoctor \
    coderay \
    curl \
    binutils-mingw-w64 \
    default-jdk \
    file \
    gcc \
    git \
    imagemagick \
    libglx-dev libgl-dev \
    libgtk2.0-dev \
    xorg-dev \
    libnvtt-bin \
    make \
    patch \
    php-cli \
    unzip \
    wget \
    zip && \
  rm -rf /var/lib/apt/lists/*

# Makes wget output shorter and better
ENV WGET_OPTIONS="--progress=bar:force:noscroll"

# Matches Debian default-jdk result, see
# https://packages.debian.org/bookworm/default-jdk
# https://packages.debian.org/bookworm/amd64/openjdk-17-jdk/filelist
# https://packages.debian.org/bookworm/amd64/openjdk-17-jdk-headless/filelist
ENV JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64/"

# Various binaries -----------------------------------------------------------

# Notes about "--chmod" for COPY:
# https://blog.vamc19.dev/posts/dockerfile-copy-chmod/
# https://github.com/moby/moby/issues/34819#issuecomment-697130379
COPY --chmod=755 \
  bin/PVRTexToolCLI \
  bin/repository_cleanup \
  bin/gh \
  bin/compressonatorcli \
  /usr/local/bin/

# Compressonator -------------------------------------------------------------

COPY compressonatorcli /usr/local/compressonatorcli
RUN chmod +x /usr/local/compressonatorcli/compressonatorcli /usr/local/compressonatorcli/compressonatorcli-bin

# Android SDK, NDK -----------------------------------------------------------

# We call thes variables CGE_JENKINS_xxx, to make it clear that CGE *ignores them*,
# they are only useful for Dockerfile and scripts inside this Docker container.
#
# CGE_JENKINS_ANDROID_PLATFORM should correspond to
# DefaultAndroidTargetSdkVersion and DefaultAndroidCompileSdkVersion
# in CGE sources tools/common-code/toolmanifest.pas .
#
# CGE_JENKINS_ANDROID_BUILD_TOOLS should correspond to
# latest revision of build tools. See
# https://developer.android.com/tools/releases/build-tools .
# Note: While releases of build tools have similar version prefix as platform number,
# it seems you should generally just use latest build tools,
# not necessarily the ones matching your platform version.
# So the CGE_JENKINS_ANDROID_BUILD_TOOLS prefix will usually be >
# CGE_JENKINS_ANDROID_PLATFORM , e.g. build tools 34.0.0 for platform 33.
ENV CGE_JENKINS_ANDROID_PLATFORM=33
ENV CGE_JENKINS_ANDROID_BUILD_TOOLS=34.0.0
ENV CGE_JENKINS_ANDROID_NDK_32_PLATFORM=16
ENV CGE_JENKINS_ANDROID_NDK_64_PLATFORM=21

ENV ANDROID_HOME=/usr/local/android/android-sdk/
ENV ANDROID_NDK_HOME=/usr/local/android/android-sdk/ndk-bundle/
# TODO: do we need path to cmdline-tools/latest ? if yes, why not add bin/ subdir?
ENV PATH="${PATH}:/usr/local/android/android-sdk/cmdline-tools/latest/:\
/usr/local/android/android-sdk/platform-tools/:\
/usr/local/android/android-sdk/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/:\
/usr/local/android/android-sdk/ndk-bundle/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/:\
/usr/local/android/android-sdk/ndk-bundle/"

COPY cmdline-tools/ /usr/local/android/android-sdk/cmdline-tools/latest/

# Install Android SDK and NDK.
#
# Note: android-cge-default-platform is used by our fpc.cfg
#
# Note: Relaxed permissions (chmod) in Android SDK, to allow Gradle to auto-install
# additional components, e.g. SDK platforms that are not default in the CGE build tool
# (CastleEngineManifest.xml can specify non-default versions).
#
# Note about mips: This is to woraround
# https://castle-engine.io/android_sdk_and_ndk_troubleshooting#_error_no_toolchains_found_in_the_ndk_toolchains_folder_for_abi_with_prefix_mipsel_linux_android
#
# Note that there's 1 license "January 16, 2019" that seems not available to accept
# before installing. So accept licenses *after* sdkmanager --install too.

RUN ( yes | /usr/local/android/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses ) && \
  /usr/local/android/android-sdk/cmdline-tools/latest/bin/sdkmanager --install \
  "platform-tools" \
  "platforms;android-${CGE_JENKINS_ANDROID_PLATFORM}" \
  "extras;google;google_play_services" \
  "build-tools;${CGE_JENKINS_ANDROID_BUILD_TOOLS}" \
  "extras;android;m2repository" \
  "ndk-bundle" && \
  ( yes | /usr/local/android/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses ) && \
  ln -s \
    /usr/local/android/android-sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/arm-linux-androideabi/"${CGE_JENKINS_ANDROID_NDK_32_PLATFORM}" \
    /usr/local/android/ndk-libs-for-cge-arm && \
  ln -s \
    /usr/local/android/android-sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/i686-linux-android/"${CGE_JENKINS_ANDROID_NDK_32_PLATFORM}" \
    /usr/local/android/ndk-libs-for-cge-i686 && \
  ln -s \
    /usr/local/android/android-sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/"${CGE_JENKINS_ANDROID_NDK_64_PLATFORM}" \
    /usr/local/android/ndk-libs-for-cge-aarch64 && \
  ln -s \
    /usr/local/android/android-sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android/"${CGE_JENKINS_ANDROID_NDK_64_PLATFORM}" \
    /usr/local/android/ndk-libs-for-cge-x86_64 && \
  echo 'source /usr/local/fpclazarus/bin/setup.sh android-default' > /usr/local/android/setup.sh && \
  mkdir -p $ANDROID_NDK_HOME/toolchains/mipsel-linux-android-4.9/prebuilt/linux-x86_64 && \
  mkdir -p $ANDROID_NDK_HOME/toolchains/mips64el-linux-android-4.9/prebuilt/linux-x86_64 && \
  chmod -R a=rwX /usr/local/android/android-sdk/

# FPC + Lazarus --------------------------------------------------------------

# Expect fpclazarus-switchable already downloaded here
# RUN git clone git@gitlab.com:admin-michalis.ii.uni.wroc.pl/fpclazarus-switchable.git
COPY fpclazarus-switchable /usr/local/fpclazarus

# Don't bother with permissions inside Docker container
#RUN chown -R root:staff /usr/local/fpclazarus/ && \
#    chmod -R a+rX /usr/local/fpclazarus/

# About Lazarus versions:
# - For latest FPC stable 3.2.2 (used by default, used for official releases)
#   we want latest Lazarus stable.
#   Note that Lazarus 2.0.12 contains GTK2 fixes for right-clicking after Andrzej fixes.
# - For oldest FPC still supported by latest CGE (this means FPC 3.2.0 now,
#   https://castle-engine.io/supported_compilers.php ) try oldest Lazarus supported.
#   To make sure we still compile with older Lazarus versions.
# - For other FPC versions, in general try latest Lazarus version possible that works.

# Removed versions not supported by CGE anymore
# (see https://castle-engine.io/supported_compilers.php ),
# they caused Docker image to be big and GH Actions were failing with disk space.
#RUN /usr/local/fpclazarus/bin/add_new_fpc_version.sh 3.0.2 2.0.0
#RUN /usr/local/fpclazarus/bin/add_new_fpc_version.sh 3.0.4 2.0.12

RUN /usr/local/fpclazarus/bin/add_new_fpc_version.sh 3.2.0 2.0.12
RUN /usr/local/fpclazarus/bin/add_new_fpc_version.sh 3.2.2 2.2.6

# FPC/Lazarus trunk revisions last updated on 2023-03-29
# See
# - https://gitlab.com/freepascal.org/fpc/source
# - https://gitlab.com/freepascal.org/lazarus/lazarus
RUN /usr/local/fpclazarus/bin/update_latest_fpclazarus.sh db66d8f0570c3b4ccae736879067d6960feb0342 8ec140d3b2bf46f3945e8c87a10fe7a06f18ab86

# We could remove subversion package now...
# but it would not save disk space, since previous layers already record the state with subversion installed.

# Make last stable default:
RUN /usr/local/fpclazarus/bin/set_default.sh 3.2.2
# Setup symlinks for FPC versions "trunk" and "android-default"
RUN cd /usr/local/fpclazarus/ && \
    ln -s 3.3.1 trunk && \
    ln -s default android-default

# Make the default FPC available without even doing 'source /usr/local/fpclazarus/bin/setup.sh default'.
# These ENV commands simulate what 'source /usr/local/fpclazarus/bin/setup.sh default' does.
ENV FPCLAZARUS_VERSION="3.2.2"
ENV PATH="${PATH}:/usr/local/fpclazarus/${FPCLAZARUS_VERSION}/fpc/bin/"
ENV FPCLAZARUS_REAL_VERSION="${FPCLAZARUS_VERSION}"
ENV FPCDIR="/usr/local/fpclazarus/${FPCLAZARUS_VERSION}/fpc/lib/fpc/${FPCLAZARUS_REAL_VERSION}/"

# PasDoc ---------------------------------------------------------------------

COPY pasdoc/ /usr/local/pasdoc/
RUN cd /usr/local/pasdoc/ && make build-fpc-default build-tools
ENV PATH="${PATH}:/usr/local/pasdoc/bin/"

# Command to run by default ----------------------------------------------------

CMD echo 'Docker container with CGE Cloud Builds Tools.' && \
  echo 'Default FPC version (can be changed using /usr/local/fpclazarus/bin/setup.sh):' && \
  fpc -iV && \
  echo 'This is a "no-cge" container, so it contains various prerequisites, but not Castle Game Engine itself!'
